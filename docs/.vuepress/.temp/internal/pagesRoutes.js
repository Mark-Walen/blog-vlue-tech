export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"v":"/assets/images/cover3.jpg","e":"<h1> Intro Page</h1>\n<p>Place your introduction and profile here.</p>\n","y":"a","t":"Intro Page","i":"info"},["/intro","/intro.md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"蓝芒小栈","i":"home"},["/index.html","/README.md"]],
  ["v-2e3eac9e","/slides.html",{"e":"<!-- markdownlint-disable MD024 MD033 MD051 -->\n","y":"s","t":"Slide page","i":"slides"},["/slides","/slides.md"]],
  ["v-51478896","/embedded-system/",{"c":["Guide"],"e":"<p>嵌入式入门学习，从这里开始。和我一起从新手小白到 IoT 大牛吧.</p>\n","y":"a","t":"嵌入式系统","I":0},["/embedded-system/index.html","/embedded-system/README.md"]],
  ["v-05661710","/embedded-system/SSH%20Login%20Without%20Password.html",{"e":"<h1> SSH 免密登录</h1>\n<p>You want to use Linux and OpenSSH to automate your tasks. Therefore you need an <strong>automatic</strong> login from host A / user a to Host B / user b. You don't want to enter any passwords, because you want to call <code>ssh</code> from a within a shell script.</p>\n<h2> How to do it</h2>","y":"a","t":"SSH 免密登录"},["/embedded-system/SSH Login Without Password.html","/embedded-system/SSH%20Login%20Without%20Password","/embedded-system/SSH Login Without Password.md","/embedded-system/SSH%20Login%20Without%20Password.md"]],
  ["v-5aa3d8ba","/en/intro.html",{"v":"/assets/images/cover3.jpg","e":"<h1> 介绍页</h1>\n<p>将你的个人介绍和档案放置在此处。</p>\n","y":"a","t":"介绍页","i":"info"},["/en/intro","/en/intro.md"]],
  ["v-2d0a870d","/en/",{"y":"h","t":"博客主页","i":"home"},["/en/index.html","/en/README.md"]],
  ["v-367b840a","/en/slides.html",{"e":"<!-- markdownlint-disable MD024 MD033 MD051 -->\n","y":"s","t":"幻灯片页","i":"slides"},["/en/slides","/en/slides.md"]],
  ["v-fffb8e28","/guide/",{"e":"<h1> Hello VuePress</h1>\n<h2> 目录结构</h2>\n<p>VuePress 遵循 “约定优于配置” 的原则，推荐的目录结构如下：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>.\n├── docs\n│   ├── .vuepress (可选的)\n│   │   ├── components (可选的)\n│   │   ├── theme (可选的)\n│   │   │   └── Layout.vue\n│   │   ├── public (可选的)\n│   │   ├── styles (可选的)\n│   │   │   ├── index.styl\n│   │   │   └── palette.styl\n│   │   ├── templates (可选的, 谨慎配置)\n│   │   │   ├── dev.html\n│   │   │   └── ssr.html\n│   │   ├── config.js (可选的)\n│   │   └── enhanceApp.js (可选的)\n│   │ \n│   ├── README.md\n│   ├── guide\n│   │   └── README.md\n│   └── config.md\n│ \n└── package.json\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Hello VuePress"},["/guide/index.html","/guide/README.md"]],
  ["v-ca04c7b8","/program/",{"e":"<h1> 编程语言学习</h1>\n<p>在这个专栏中，你可以学习到许多编程相关的知识哦！</p>\n","y":"a","t":"编程语言学习"},["/program/index.html","/program/README.md"]],
  ["v-1692d978","/embedded-system/ble5-stack/",{"e":"<h1> BLE5 Stack</h1>\n","y":"a","t":"BLE5 Stack"},["/embedded-system/ble5-stack/index.html","/embedded-system/ble5-stack/README.md"]],
  ["v-4a968f1a","/embedded-system/ecp/",{"e":"<h1> 电子通信协议</h1>\n<h2> 通信</h2>\n<p>电子设备之间的通信就像是人与人之间的交流，都需要说相同的语言进行沟通。通信协议就是电子器件（嵌入式）进行通信时使用的语言。当我们构建大都数电子工程项目时，我们需要知道的通信协议很少。在接下来的一系列文章中，我们会讨论几种最基本、最常见的协议：SPI、I2C和UART。</p>\n<p>SPI、I2C 和 UART虽然相对于其他通信协议会比较慢，如 USB、Ethernet、Bluetooth 和 WiFi，但是它们非常的简单，而且占用的硬件资源和系统资源非常的少。SPI、I2C 和 UART 非常适合微控制处理器之间的通信，也非常适合当微控制处理与传感器之间不需要传输大量高速数据时的通信。</p>","y":"a","t":"电子通信协议"},["/embedded-system/ecp/index.html","/embedded-system/ecp/README.md"]],
  ["v-7ca14673","/embedded-system/rtos/",{"d":1682294400000,"l":"2023年4月24日","e":"介绍什么是实时操作系统","y":"a","t":"实时操作系统"},["/embedded-system/rtos/index.html","/embedded-system/rtos/README.md"]],
  ["v-42033206","/embedded-system/stm32/stm32-learning-process.html",{"e":"<h1> STM32 Learning Process</h1>\n<h2> 安装 STM32CubeIDE</h2>\n<h2> 使用 STM32CubeIDE 创建一个项目</h2>\n<ol>\n<li>\n<p>点击 Toolbar 中的 File，然后将鼠标悬浮在 New 那一项，选择 STM32 Project。</p>\n<figure><img src=\"/assets/img/stm32/create_project.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</li>\n<li>\n<p>初次创建时，会自动下载相关的 SDK 和一些其他的依赖（stm32cube_fw_f4_v1270、stm32cube_fw_f4_v1271），包括驱动、以及第三方中间件（如 free-rtos）。</p>\n</li>\n<li>\n<p>选择 MCU：根据自己芯片的特性可以很快地筛选出自己所用的 MCU。下图的左侧边栏是筛选条件，在 Commercial Part Number 输入自己使用的 MCU 型号。</p>\n<figure><img src=\"/assets/img/stm32/Select_Board.png\" alt=\"image-20220811003052482\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220811003052482</figcaption></figure>\n</li>\n<li>\n<p>在右侧视图的下面选择自己的 MCU，然后点击 next，输入 Project 名称，点击 FInish，一个 STM32 项目就创建完成了。</p>\n</li>\n</ol>","y":"a","t":"STM32 Learning Process"},["/embedded-system/stm32/stm32-learning-process","/embedded-system/stm32/stm32-learning-process.md"]],
  ["v-5bf1a160","/program/c/",{"e":"<h1> C 语言学习</h1>\n","y":"a","t":"C 语言学习"},["/program/c/index.html","/program/c/README.md"]],
  ["v-43e77858","/program/data-structure/linear-table.html",{"e":"<h1> 线性表</h1>\n<h2> 单链表</h2>\n<img src=\"/assets/img/linear-table/traverse.gif\" style=\"margin-top: 6px;\">\n<h3> 存储结构</h3>\n<blockquote>\n<p>链式存储结构</p>\n</blockquote>\n<p>问题1：</p>\n<p>链式存储结构的特点：</p>\n<p>用一组<mark>任意的</mark>存储单元存储线性表的数据元素。</p>\n<p><strong>两个域</strong></p>\n<ol>\n<li>\n<p>数据域：存储数据元素的信息。</p>\n</li>\n<li>\n<p>指针域：存储后继结点的存储位置（即地址）。</p>\n<img src=\"/assets/img/linear-table/链式存储构成.png\" alt=\"链式的结构\" style=\"zoom:48%;\">\n</li>\n</ol>","y":"a","t":"线性表"},["/program/data-structure/linear-table","/program/data-structure/linear-table.md"]],
  ["v-2a78f30a","/program/data-structure/",{"e":"<h1> 数据结构基础</h1>\n<blockquote>\n<p>本文主要参考 《数据结构——C语言版》严蔚敏版(第二版)</p>\n</blockquote>\n","y":"a","t":"简介"},["/program/data-structure/index.html","/program/data-structure/README.md"]],
  ["v-4920bc0c","/program/data-structure/stack.html",{"a":"Mark Walen","c":"数据结构","e":"<h1> 栈</h1>\n<h2> 顺序栈</h2>\n<h3> 定义</h3>\n<blockquote>\n<p><strong>栈</strong> 仅限定在表尾进行插入或删除操作的线性表，是一种<strong>后进先出</strong>的数据结构</p>\n</blockquote>\n<figure><img src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/06/03/screen-shot-2018-06-02-at-203523.png\" alt=\"栈\" tabindex=\"0\" loading=\"lazy\"><figcaption>栈</figcaption></figure>","y":"a","t":"栈"},["/program/data-structure/stack","/program/data-structure/stack.md"]],
  ["v-3cbd8d6c","/embedded-system/rtos/freertos/",{"d":1682294400000,"l":"2023年4月24日","e":"文档翻译","y":"a","t":"Free RTOS 实时操作系统"},["/embedded-system/rtos/freertos/index.html","/embedded-system/rtos/freertos/README.md"]],
  ["v-714cb020","/embedded-system/rtos/ti-rtos/clocks.html",{"d":1676851200000,"l":"2023年2月20日","e":"<p>时钟实例是可以安排在一定数量的系统滴答后运行的函数。时钟实例是一次性的或周期性的。这些实例在创建后立即启动，配置为在延迟后启动，并且可以随时停止。所有时钟实例在 <a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/ble5stack/ble_user_guide/html/ble-stack-5.x-guide/reference-cc2640.html#term-swi\" target=\"_blank\" rel=\"noopener noreferrer\">Swi</a> 上下文中过期时执行。以下示例显示最小分辨率是 TI-RTOS 配置文件 (<code>.cfg</code>) 中设置的 TI-RTOS 时钟节拍周期。</p>","y":"a","t":"时钟"},["/embedded-system/rtos/ti-rtos/clocks","/embedded-system/rtos/ti-rtos/clocks.md"]],
  ["v-2e1dfeee","/embedded-system/rtos/ti-rtos/creating_vs_constructing.html",{"d":1673308800000,"l":"2023年1月10日","e":"<h2> 创建 vs 构造</h2>\n<p>大多数 TI-RTOS 模块通常具有 <code>_create()</code> 和 <code>_construct()</code> API 来初始化原始实例。两个 API 之间运行时的主要差异是内存分配和错误处理。</p>\n<p><strong>Create</strong> API 在初始化之前从默认 TI-RTOS 堆执行内存分配。因此，应用程序必须在继续之前检查有效 <u>句​​柄</u>（handle）的返回值。</p>\n\n<div class=\"language-c line-numbers-mode\" data-ext=\"c\"><pre class=\"language-c\"><code>Semaphore_Handle sem<span class=\"token punctuation\">;</span>\nSemaphore_Params semParams<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">Semaphore_Params_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>semParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsem <span class=\"token operator\">=</span> <span class=\"token function\">Semaphore_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>semParams<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Memory allocated in here */</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sem <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Check if the handle is valid */</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">System_abort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Semaphore could not be created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"创建 vs 构造"},["/embedded-system/rtos/ti-rtos/creating_vs_constructing","/embedded-system/rtos/ti-rtos/creating_vs_constructing.md"]],
  ["v-49702201","/embedded-system/rtos/ti-rtos/kernel_configuration.html",{"d":1673222400000,"l":"2023年1月9日","e":"<h2> 内核配置</h2>\n<p>TI-RTOS 应用程序使用配置文件（<code>.cfg</code> 文件）配置 TI-RTOS 内核。在 IAR 和 CCS 项目中，此文件位于 <code>TOOLS</code> 文件夹下的应用程序项目工作区中。</p>\n<p>配置是通过有选择性地引入或使用内核可用的 <a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/ble5stack/ble_user_guide/html/ble-stack-5.x-guide/reference-cc2640.html#term-rtsc\" target=\"_blank\" rel=\"noopener noreferrer\">RTSC</a> 模块来完成的。若要使用模块，在 <code>.cfg</code> 配置文件中调用 <code>xdc.useModule()</code> 之后，<code>xdc.useModule()</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">^{[1]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.888em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span></span></span></span> 可以设置 <a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/tirtos/sysbios/docs/Bios_User_Guide.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">TI-RTOS Kernel (SYS/BIOS) User’s Guide</a> 中定义的各种选项。</p>","y":"a","t":"内核配置"},["/embedded-system/rtos/ti-rtos/kernel_configuration","/embedded-system/rtos/ti-rtos/kernel_configuration.md"]],
  ["v-21ca8b50","/embedded-system/rtos/ti-rtos/power_management.html",{"d":1676851200000,"l":"2023年2月20日","e":"<p>所有功耗管理功能均由 TI-RTOS 电源驱动程序处理，并由外围驱动程序（例如 UART、SPI、I2C 等）使用。应用程序可以选择通过设置功率限制来阻止 CC2640R2 进入低功耗模式。</p>\n<p>有关功耗管理功能的更多信息，请参阅<a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/drivers/Power_Management.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">电源管理用户指南</a>。只有在使用自定义驱动程序时才需要这些 API。</p>","y":"a","t":"功耗管理"},["/embedded-system/rtos/ti-rtos/power_management","/embedded-system/rtos/ti-rtos/power_management.md"]],
  ["v-6f98529a","/embedded-system/rtos/ti-rtos/queues.html",{"d":1673481600000,"l":"2023年1月12日","e":"<p>TI-RTOS 队列模块提供了一个线程安全的单向消息传递模块，以先进先出 (FIFO) 的方式运行。队列通常用于允许高优先级线程将消息传递给低优先级任务以进行延迟处理；因此允许低优先级任务阻塞直到需要运行。</p>\n<p>在图 43 中，队列配置为从任务 A 到任务 B 的单向通信。任务 A 将消息“放入”队列，任务 B 从队列中“获取”消息。</p>\n\n<p>在 BLE5-Stack 中，TI-RTOS 队列函数已被抽象为 <code>util.c</code> 中的函数，请参阅 <a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/tirtos/sysbios/docs/Bios_User_Guide.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">TI-RTOS 内核 (SYS/BIOS) 用户指南</a>中的队列模块文档。<code>util.c</code> 中的函数将 Queue 模块中的队列与 Event 模块中的事件组合在一起，以在线程之间传递消息。</p>","y":"a","t":"队列"},["/embedded-system/rtos/ti-rtos/queues","/embedded-system/rtos/ti-rtos/queues.md"]],
  ["v-97128938","/embedded-system/rtos/ti-rtos/",{"d":1650240000000,"l":"2022年4月18日","e":"<p>TI-RTOS 内核管理四种不同线程执行的上下文级别。线程模块按优先级降序显示如下：</p>\n<ul>\n<li>硬件中断</li>\n<li>软件中断</li>\n<li>任务</li>\n<li>后台空闲函数的空闲任务</li>\n</ul>\n<div class=\"figure align-center\" id=\"figure-40\">\n    <span id=\"fig-tirtos-threads\"></span>\n    <img class=\"medium-zoom-image\" alt=\"TI-RTOS Execution Threads\" src=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/ble5stack/ble_user_guide/html/_images/fig-tirtos-threads.jpg\">\n    <p class=\"caption\">\n        <span class=\"caption-number\">Figure 40. </span>\n        <span class=\"caption-text\">图 40. TI-RTOS 执行线程</span>\n    </p>\n</div>","y":"a","t":"线程模块"},["/embedded-system/rtos/ti-rtos/index.html","/embedded-system/rtos/ti-rtos/README.md"]],
  ["v-8526c722","/embedded-system/rtos/ti-rtos/tasks.html",{"d":1673568000000,"l":"2023年1月13日","e":"<p>TI-RTOS 任务在概念上等同于在单个 C 程序中并行执行函数的独立线程。实际上，将处理器从一项任务切换到另一项任务有助于实现并发。每个任务始终处于以下执行模式之一：</p>\n<ul>\n<li><strong>执行</strong>：任务当前正在运行</li>\n<li><strong>就绪</strong>： 任务被安排执行</li>\n<li><strong>阻塞</strong>：任务暂停执行</li>\n<li><strong>停止</strong>：任务执行完成后，进入终止状态</li>\n<li><strong>静止</strong>：任务在非活动列表中</li>\n</ul>\n<p>一个（并且只有一个）任务始终在运行，即使它只是空闲任务（参见<a href=\"/embedded-system/rtos/ti-rtos/#figure-40\" target=\"blank\">图 40</a>）。当前运行的任务可以通过调用某些任务模块函数以及其他模块（如信号量）提供的函数来阻止执行。当前任务也可以自行终止。在任何一种情况下，处理器都会切换到准备运行的最高优先级任务。有关这些功能的更多信息，请参阅 <a href=\"https://dev.ti.com/tirex/explore/content/simplelink_cc2640r2_sdk_5_30_00_03/docs/tirtos/sysbios/docs/Bios_User_Guide.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">TI-RTOS 内核 (SYS/BIOS) 用户指南</a>的包 <code>ti.sysbios.knl</code> 部分中的任务模块。</p>","y":"a","t":"任务"},["/embedded-system/rtos/ti-rtos/tasks","/embedded-system/rtos/ti-rtos/tasks.md"]],
  ["v-701b27aa","/embedded-system/rtos/ti-rtos/thread_synchronization.html",{"d":1673308800000,"l":"2023年1月10日","e":"<p>TI-RTOS 内核提供了几个用于同步任务的模块，例如信号量、事件和队列。以下部分讨论这些常见的 TI-RTOS 原语。</p>\n<h2> 信号量（Semaphores）</h2>\n<p>信号量通常用于整个 TI-RTOS 应用程序中的任务同步和互斥。图 42 展示了信号量功能。信号量可以是计数信号量或二进制信号量。计数信号量使用 <code>Semaphore_post()</code> 跟踪信号量发布的次数。当任务之间共享一组资源时，此功能很有用。此类任务可能会调用 Semaphore_pend() 以在使用资源之前查看资源是否可用。二进制信号量只能有两种状态：可用（count = 1）和不可用（count = 0）。二进制信号量可用于在任务之间共享单个资源，或用于信号量可多次发布的基本信号机制。二进制信号量不跟踪计数；他们只跟踪信号量是否已发布。</p>","y":"a","t":"线程同步"},["/embedded-system/rtos/ti-rtos/thread_synchronization","/embedded-system/rtos/ti-rtos/thread_synchronization.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},["/404"]],
  ["v-193a881a","/embedded-system/stm32/",{"y":"p","t":"Stm32"},["/embedded-system/stm32/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},["/timeline/index.html"]],
  ["v-ac0c2a6a","/category/guide/",{"y":"p","t":"Guide 分类","I":0},["/category/guide/index.html"]],
  ["v-075c6c62","/en/tag/",{"y":"p","t":"Tag","I":0},["/en/tag/index.html"]],
  ["v-506407f4","/en/article/",{"y":"p","t":"Articles","I":0},["/en/article/index.html"]],
  ["v-37a8c5a0","/en/star/",{"y":"p","t":"Star","I":0},["/en/star/index.html"]],
  ["v-0379cba1","/en/timeline/",{"y":"p","t":"Timeline","I":0},["/en/timeline/index.html"]],
  ["v-4f178b9c","/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"y":"p","t":"数据结构 分类","I":0},["/category/数据结构/","/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html"]],
  ["v-5decfa84","/en/category/",{"y":"p","t":"Category","I":0},["/en/category/index.html"]],
]
